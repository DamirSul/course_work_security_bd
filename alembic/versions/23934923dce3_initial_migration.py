"""Initial migration

Revision ID: 23934923dce3
Revises: 
Create Date: 2025-05-14 17:55:40.883413

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '23934923dce3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None



def upgrade() -> None:
    """Upgrade schema."""
    # Используем raw SQL для удаления таблиц с CASCADE
    op.execute('DROP TABLE IF EXISTS employees CASCADE')
    op.execute('DROP TABLE IF EXISTS purchase_plan CASCADE')
    op.execute('DROP TABLE IF EXISTS notification_types CASCADE')
    op.execute('DROP TABLE IF EXISTS resources CASCADE')
    op.execute('DROP TABLE IF EXISTS flower_base CASCADE')
    op.execute('DROP TABLE IF EXISTS beds CASCADE')
    op.execute('DROP TABLE IF EXISTS flower_planting CASCADE')
    op.execute('DROP TABLE IF EXISTS reports CASCADE')
    op.execute('DROP TABLE IF EXISTS bed_actions CASCADE')
    op.execute('DROP TABLE IF EXISTS care CASCADE')
    op.execute('DROP TABLE IF EXISTS agronomist CASCADE')
    op.execute('DROP TABLE IF EXISTS beds_agronomists CASCADE')
    op.execute('DROP TABLE IF EXISTS purchases CASCADE')
    op.execute('DROP TABLE IF EXISTS system_notifications CASCADE')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_notifications',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_type_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('report_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('from_employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('to_employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('notification_note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['from_employee_id'], ['employees.id'], name='system_notifications_from_employee_id_fkey'),
    sa.ForeignKeyConstraint(['notification_type_id'], ['notification_types.id'], name='system_notifications_notification_type_id_fkey'),
    sa.ForeignKeyConstraint(['report_id'], ['reports.id'], name='system_notifications_report_id_fkey'),
    sa.ForeignKeyConstraint(['to_employee_id'], ['employees.id'], name='system_notifications_to_employee_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='system_notifications_pkey')
    )
    op.create_table('purchases',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('purchase_plan_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('create_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['purchase_plan_id'], ['purchase_plan.id'], name='purchases_purchase_plan_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='purchases_pkey')
    )
    op.create_table('beds_agronomists',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('agronomist_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bed_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['agronomist_id'], ['agronomist.id'], name='beds_agronomists_agronomist_id_fkey'),
    sa.ForeignKeyConstraint(['bed_id'], ['beds.id'], name='beds_agronomists_bed_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='beds_agronomists_pkey')
    )
    op.create_table('agronomist',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name='agronomist_employee_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='agronomist_pkey')
    )
    op.create_table('care',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('care_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='care_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('bed_actions',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('care_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('labor_costs', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['care_id'], ['care.id'], name='bed_actions_care_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='bed_actions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('reports',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('scale', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('report_link', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='reports_pkey')
    )
    op.create_table('flower_planting',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flower_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('bed_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('action_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity_planted', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['bed_actions.id'], name='flower_planting_action_id_fkey'),
    sa.ForeignKeyConstraint(['bed_id'], ['beds.id'], name='flower_planting_bed_id_fkey'),
    sa.ForeignKeyConstraint(['flower_id'], ['flower_base.id'], name='flower_planting_flower_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='flower_planting_pkey')
    )
    op.create_table('beds',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bed_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_capacity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('current_occupancy', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='beds_pkey')
    )
    op.create_table('flower_base',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('flower_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('variety', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('color', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='flower_base_pkey')
    )
    op.create_table('resources',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resource_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('quantity_available', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='resources_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('notification_types',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('notification_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='notification_types_pkey')
    )
    op.create_table('purchase_plan',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('quantity', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('employee_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('create_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['employee_id'], ['employees.id'], name='purchase_plan_employee_id_fkey'),
    sa.ForeignKeyConstraint(['resource_id'], ['resources.id'], name='purchase_plan_resource_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='purchase_plan_pkey')
    )
    op.create_table('employees',
    sa.Column('id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('position', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('phone_number', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='employees_pkey')
    )
    # ### end Alembic commands ###
